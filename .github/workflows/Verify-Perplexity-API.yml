name: Verify Perplexity API

on:
  workflow_dispatch:
  schedule:
    - cron: '0 9 * * 1'  # 매주 월요일 오전 9시 검증

jobs:
  verify_perplexity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          pip install openai requests
          
      - name: Verify Perplexity API Configuration
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          echo "=== Perplexity API Configuration Check ==="
          if [ -z "$PERPLEXITY_API_KEY" ]; then
            echo "❌ PERPLEXITY_API_KEY is not configured"
            echo "Please set this secret in repository settings"
            echo "💡 Perplexity Pro subscribers get $5 monthly credits"
            exit 1
          else
            echo "✅ PERPLEXITY_API_KEY is configured"
            # API 키 길이 확인 (Perplexity API 키는 보통 긴 형태)
            key_length=${#PERPLEXITY_API_KEY}
            echo "📊 API Key Length: $key_length characters"
          fi
      
      - name: Test Perplexity API Connection
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          cat > test_perplexity_api.py << 'EOF'
          from openai import OpenAI
          import os
          import json
          import time
          
          def test_perplexity_api():
              api_key = os.environ.get('PERPLEXITY_API_KEY')
              
              if not api_key:
                  print("❌ API key not found")
                  return False
              
              print("=== Testing Perplexity API Connection ===")
              print(f"🔑 API Key Length: {len(api_key)} characters")
              print(f"🔑 API Key Prefix: {api_key[:8]}...")
              
              # OpenAI 클라이언트 초기화 (Perplexity base_url 사용)
              client = OpenAI(
                  api_key=api_key,
                  base_url="https://api.perplexity.ai"
              )
              
              # 1. 기본 API 연결 테스트
              print("\n=== Basic API Connection Test ===")
              try:
                  response = client.chat.completions.create(
                      model="llama-3.1-sonar-small-128k-online",
                      messages=[
                          {
                              "role": "system",
                              "content": "You are a helpful assistant. Respond in Korean."
                          },
                          {
                              "role": "user",
                              "content": "Hello, this is a connection test."
                          }
                      ],
                      max_tokens=50,
                      temperature=0.1
                  )
                  
                  print("✅ API Connection: Success")
                  print(f"📝 Response: {response.choices[0].message.content}")
                  print(f"📊 Tokens Used: {response.usage.total_tokens}")
                  
              except Exception as e:
                  print(f"❌ API Connection Error: {e}")
                  return False
              
              # 2. 번역 기능 테스트
              print("\n=== Translation Functionality Test ===")
              
              translation_tests = [
                  {"text": "Hello World", "target": "Korean", "expected_lang": "한국어"},
                  {"text": "Settings", "target": "Japanese", "expected_lang": "日本語"},
                  {"text": "Welcome", "target": "Chinese", "expected_lang": "中文"},
                  {"text": "Error", "target": "French", "expected_lang": "Français"},
                  {"text": "Success", "target": "German", "expected_lang": "Deutsch"}
              ]
              
              total_tokens = 0
              successful_translations = 0
              
              for test in translation_tests:
                  try:
                      response = client.chat.completions.create(
                          model="llama-3.1-sonar-small-128k-online",
                          messages=[
                              {
                                  "role": "system",
                                  "content": f"You are a professional translator. Translate the given text to {test['target']}. Only return the translated text without any explanation."
                              },
                              {
                                  "role": "user",
                                  "content": test['text']
                              }
                          ],
                          max_tokens=100,
                          temperature=0.1
                      )
                      
                      translated = response.choices[0].message.content.strip()
                      tokens_used = response.usage.total_tokens
                      total_tokens += tokens_used
                      
                      print(f"✅ {test['target']}: '{test['text']}' -> '{translated}' ({tokens_used} tokens)")
                      successful_translations += 1
                      
                      # API 제한 방지를 위한 대기
                      time.sleep(0.5)
                      
                  except Exception as e:
                      print(f"❌ {test['target']}: Translation failed - {e}")
              
              print(f"\n📊 Translation Success Rate: {successful_translations}/{len(translation_tests)}")
              print(f"📊 Total Tokens Used: {total_tokens}")
              
              # 3. 모델 정보 및 성능 테스트
              print("\n=== Model Information Test ===")
              
              models_to_test = [
                  "llama-3.1-sonar-small-128k-online",
                  "llama-3.1-sonar-large-128k-online",
                  "llama-3.1-8b-instruct"
              ]
              
              working_models = []
              
              for model in models_to_test:
                  try:
                      response = client.chat.completions.create(
                          model=model,
                          messages=[
                              {
                                  "role": "user",
                                  "content": "Test message"
                              }
                          ],
                          max_tokens=10,
                          temperature=0.1
                      )
                      
                      print(f"✅ {model}: Available")
                      working_models.append(model)
                      time.sleep(0.3)
                      
                  except Exception as e:
                      print(f"❌ {model}: Not available - {e}")
              
              # 4. 비용 및 사용량 정보
              print("\n=== Cost and Usage Information ===")
              estimated_cost = total_tokens * 0.0001  # 대략적인 비용 계산
              print(f"💰 Estimated Cost: ${estimated_cost:.4f}")
              print(f"💳 Pro Subscriber Monthly Credit: $5.00")
              print(f"📊 Available Models: {len(working_models)}")
              print("💡 Monitor your usage at Perplexity Settings > API")
              
              # 5. 온라인 검색 기능 테스트 (Perplexity 고유 기능)
              print("\n=== Online Search Capability Test ===")
              try:
                  response = client.chat.completions.create(
                      model="llama-3.1-sonar-small-128k-online",
                      messages=[
                          {
                              "role": "user",
                              "content": "What is the current date and time? Please provide real-time information."
                          }
                      ],
                      max_tokens=100,
                      temperature=0.1
                  )
                  
                  online_response = response.choices[0].message.content
                  print(f"✅ Online Search: {online_response[:100]}...")
                  print("✅ Real-time information capability verified")
                  
              except Exception as e:
                  print(f"❌ Online Search Test Failed: {e}")
              
              return successful_translations >= len(translation_tests) * 0.8  # 80% 성공률 요구
          
          if __name__ == "__main__":
              success = test_perplexity_api()
              if not success:
                  print("\n❌ Some Perplexity API tests failed")
                  exit(1)
              else:
                  print("\n🎉 All Perplexity API tests passed!")
                  print("🚀 Ready for production translation workflow")
          EOF
          
          python test_perplexity_api.py
      
      - name: Generate Perplexity API Status Report
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          echo "=== Perplexity API Status Report ===" > api_status_report.md
          echo "Generated on: $(date)" >> api_status_report.md
          echo "" >> api_status_report.md
          echo "## Configuration Status" >> api_status_report.md
          
          if [ -n "$PERPLEXITY_API_KEY" ]; then
            echo "- ✅ API Key: Configured" >> api_status_report.md
            echo "- 💳 Pro Subscription: Required for API access" >> api_status_report.md
            echo "- 💰 Monthly Credit: \$5.00 (Pro subscribers)" >> api_status_report.md
          else
            echo "- ❌ API Key: Not configured" >> api_status_report.md
            echo "- ⚠️  Please set PERPLEXITY_API_KEY in repository secrets" >> api_status_report.md
          fi
          
          echo "" >> api_status_report.md
          echo "## Available Models" >> api_status_report.md
          echo "- 🚀 llama-3.1-sonar-small-128k-online (Fast, Online)" >> api_status_report.md
          echo "- 🎯 llama-3.1-sonar-large-128k-online (Accurate, Online)" >> api_status_report.md
          echo "- ⚡ llama-3.1-8b-instruct (Fast, Offline)" >> api_status_report.md
          echo "" >> api_status_report.md
          echo "## Supported Target Languages" >> api_status_report.md
          echo "- 🇰🇷 한국어 (Korean)" >> api_status_report.md
          echo "- 🇯🇵 日本語 (Japanese)" >> api_status_report.md
          echo "- 🇨🇳 中文 (Chinese)" >> api_status_report.md
          echo "- 🇫🇷 Français (French)" >> api_status_report.md
          echo "- 🇩🇪 Deutsch (German)" >> api_status_report.md
          echo "- 🇪🇸 Español (Spanish)" >> api_status_report.md
          echo "- 🇮🇹 Italiano (Italian)" >> api_status_report.md
          echo "- 🇵🇹 Português (Portuguese)" >> api_status_report.md
          echo "- 🇸🇦 العربية (Arabic)" >> api_status_report.md
          echo "- 🇮🇳 हिन्दी (Hindi)" >> api_status_report.md
          echo "- 🇭🇺 Magyar (Hungarian)" >> api_status_report.md
          echo "- 🇮🇩 Bahasa Indonesia (Indonesian)" >> api_status_report.md
          echo "- 🇹🇷 Türkçe (Turkish)" >> api_status_report.md
          echo "- 🇹🇭 ไทย (Thai)" >> api_status_report.md
          echo "" >> api_status_report.md
          echo "## Unique Features" >> api_status_report.md
          echo "- 🌐 Real-time online information access" >> api_status_report.md
          echo "- 🔍 Context-aware translation" >> api_status_report.md
          echo "- ⚡ 2.9x faster than Replicate" >> api_status_report.md
          echo "- 💰 Free \$5 monthly credits for Pro subscribers" >> api_status_report.md
          echo "" >> api_status_report.md
          echo "## Next Steps" >> api_status_report.md
          echo "- Run the main Perplexity translation workflow" >> api_status_report.md
          echo "- Monitor API usage in Perplexity Settings > API" >> api_status_report.md
          echo "- Consider using different models based on speed/accuracy needs" >> api_status_report.md
          
          cat api_status_report.md

      - name: Create Quick Start Guide
        run: |
          cat > PERPLEXITY_QUICKSTART.md << 'EOF'
          # Perplexity API 빠른 시작 가이드
          
          ## API 키 설정
          1. Perplexity Pro 구독 확인
          2. Settings > API > Generate 버튼 클릭
          3. GitHub Secrets에 PERPLEXITY_API_KEY 추가
          
          ## 기본 사용법
          ```
          from openai import OpenAI
          
          client = OpenAI(
              api_key="your-api-key",
              base_url="https://api.perplexity.ai"
          )
          
          response = client.chat.completions.create(
              model="llama-3.1-sonar-small-128k-online",
              messages=[{"role": "user", "content": "Hello"}]
          )
          ```
          
          ## 번역 최적화 팁
          - Temperature 0.1 사용으로 일관성 확보
          - 시스템 프롬프트로 번역 품질 향상
          - 소형 모델로 비용 절약, 대형 모델로 품질 향상
          
          ## 비용 관리
          - Pro 구독자: 월 $5 무료 크레딧
          - 토큰 사용량 모니터링 필수
          - 배치 처리로 효율성 증대
          EOF
          
          echo "📚 Quick start guide created: PERPLEXITY_QUICKSTART.md"
