name: Make .mo file with LibreTranslate

on:
  workflow_dispatch:

jobs:
  translate_and_convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Git
        run: |
          git config --global user.name "PeterSuh-Q3"
          git config --global user.email dante9000@gmail.com
          
      - name: Set up Python for translation
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
          pip install requests polib
          
      - name: Create LibreTranslate translation script
        run: |
          cat > translate_po.py << 'EOF'
          import os
          import requests
          import polib
          import time
          import json
          
          # 언어 코드 매핑
          LANGUAGES = {
              'ko_KR': 'ko',
              'ja_JP': 'ja', 
              'zh_CN': 'zh',
              'ru_RU': 'ru',
              'fr_FR': 'fr',
              'de_DE': 'de',
              'es_ES': 'es',
              'it_IT': 'it',
              'pt_BR': 'pt',
              'ar_EG': 'ar',
              'hi_IN': 'hi',
              'hu_HU': 'hu',
              'id_ID': 'id',
              'tr_TR': 'tr',
              'th_TH': 'th'
          }
          
          def translate_with_libretranslate(text, target_lang, source_lang='en'):
              """LibreTranslate API를 사용한 번역"""
              url = "https://libretranslate.de/translate"
              
              payload = {
                  'q': text,
                  'source': source_lang,
                  'target': target_lang,
                  'format': 'text'
              }
              
              try:
                  response = requests.post(url, data=payload, timeout=10)
                  if response.status_code == 200:
                      result = response.json()
                      return result.get('translatedText', text)
                  else:
                      print(f"Translation API error: {response.status_code}")
                      return text
              except Exception as e:
                  print(f"Translation error: {e}")
                  return text
          
          def create_po_file(locale, lang_code, entries):
              """PO 파일 생성"""
              target_dir = f"lang/{locale}/LC_MESSAGES"
              os.makedirs(target_dir, exist_ok=True)
              
              po = polib.POFile()
              po.metadata = {
                  'Content-Type': 'text/plain; charset=UTF-8',
                  'Language': lang_code,
                  'MIME-Version': '1.0',
                  'Content-Transfer-Encoding': '8bit',
              }
              
              for msgid, msgstr in entries.items():
                  if msgid.strip():  # 빈 문자열 제외
                      entry = polib.POEntry(
                          msgid=msgid,
                          msgstr=msgstr
                      )
                      po.append(entry)
              
              target_path = os.path.join(target_dir, 'tcrp.po')
              po.save(target_path)
              print(f"Created: {target_path}")
              return target_path
          
          def main():
              source_path = 'lang/en_US/LC_MESSAGES/tcrp.po'
              
              if not os.path.exists(source_path):
                  print(f"Source file not found: {source_path}")
                  print("Creating sample file...")
                  os.makedirs('lang/en_US/LC_MESSAGES', exist_ok=True)
                  
                  # 샘플 PO 파일 생성
                  with open(source_path, 'w', encoding='utf-8') as f:
                      f.write('''# Sample PO file
          msgid ""
          msgstr ""
          "Content-Type: text/plain; charset=UTF-8\\n"
          "Language: en\\n"
          
          msgid "Hello"
          msgstr "Hello"
          
          msgid "Welcome"
          msgstr "Welcome"
          
          msgid "Settings"
          msgstr "Settings"
          
          msgid "Save"
          msgstr "Save"
          
          msgid "Cancel"
          msgstr "Cancel"
          
          msgid "Error"
          msgstr "Error"
          
          msgid "Success"
          msgstr "Success"
          ''')
              
              # 원본 PO 파일 로드
              try:
                  po = polib.pofile(source_path)
              except Exception as e:
                  print(f"Error loading PO file: {e}")
                  return
              
              # 각 언어별로 번역
              for locale, lang_code in LANGUAGES.items():
                  print(f"Translating to {locale} ({lang_code})...")
                  
                  translated_entries = {}
                  
                  for entry in po:
                      if entry.msgid and entry.msgid.strip():
                          print(f"Translating: {entry.msgid[:50]}...")
                          translated_text = translate_with_libretranslate(
                              entry.msgid, lang_code
                          )
                          translated_entries[entry.msgid] = translated_text
                          time.sleep(0.5)  # API 제한 방지
                      
                  create_po_file(locale, lang_code, translated_entries)
                  time.sleep(1)  # 각 언어간 간격
          
          if __name__ == "__main__":
              main()
          EOF
          
      - name: Generate translated PO files
        run: |
          python translate_po.py
          
      - name: Convert PO to MO files
        run: |
          ROOT_PATH=${{ github.workspace }}
          DEST_PATH="${ROOT_PATH}/lang"
          
          echo "Converting PO to MO files..."
          for P in $(find ${DEST_PATH} -name "tcrp.po" 2>/dev/null); do
            echo "Converting ${P} to ${P/.po/.mo}"
            msgfmt ${P} -o ${P/.po/.mo}
            
            if [ -f "${P/.po/.mo}" ]; then
              echo "✓ Successfully created: ${P/.po/.mo}"
            else
              echo "✗ Failed to create: ${P/.po/.mo}"
            fi
          done
          
          echo "Generated files:"
          find ${DEST_PATH} -name "*.po" -o -name "*.mo" | sort
          
          tar -zcvf lang.tgz -C ${DEST_PATH} .
          
      - name: Commit and push changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-translate and generate .po/.mo files [$(date)]"
            git push
          fi
