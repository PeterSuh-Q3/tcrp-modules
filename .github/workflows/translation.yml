name: Make .mo file with Azure Translator

on:
  workflow_dispatch:

jobs:
  translate_and_convert:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Git
        run: |
          git config --global user.name "PeterSuh-Q3"
          git config --global user.email dante9000@gmail.com
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
          pip install requests polib tqdm
          
      - name: Create complete Azure Translator script
        env:
          AZURE_TRANSLATOR_KEY: ${{ secrets.AZURE_TRANSLATOR_KEY }}
          AZURE_TRANSLATOR_REGION: ${{ secrets.AZURE_TRANSLATOR_REGION }}
        run: |
          cat > azure_translate.py << 'EOF'
          import os
          import requests
          import polib
          import json
          import time
          from tqdm import tqdm
          
          LANGUAGES = {
              'ko_KR': 'ko',
              'ja_JP': 'ja', 
              'zh_CN': 'zh-Hans',
              'ru_RU': 'ru',
              'fr_FR': 'fr',
              'de_DE': 'de',
              'es_ES': 'es',
              'it_IT': 'it',
              'pt_BR': 'pt',
              'ar_EG': 'ar',
              'hi_IN': 'hi',
              'hu_HU': 'hu',
              'id_ID': 'id',
              'tr_TR': 'tr',
              'th_TH': 'th'
          }
          
          def translate_with_azure(text, target_lang, max_retries=3):
              key = os.environ.get('AZURE_TRANSLATOR_KEY')
              region = os.environ.get('AZURE_TRANSLATOR_REGION', 'eastus')
              
              if not key:
                  print("Azure Translator key not found, skipping translation")
                  return text
                  
              endpoint = "https://api.cognitive.microsofttranslator.com/translate"
              
              headers = {
                  'Ocp-Apim-Subscription-Key': key,
                  'Ocp-Apim-Subscription-Region': region,
                  'Content-type': 'application/json'
              }
              
              params = {
                  'api-version': '3.0',
                  'from': 'en',
                  'to': target_lang
              }
              
              body = [{'text': text}]
              
              for attempt in range(max_retries):
                  try:
                      response = requests.post(endpoint, params=params, headers=headers, json=body, timeout=30)
                      
                      if response.status_code == 200:
                          result = response.json()
                          return result[0]['translations'][0]['text']
                      elif response.status_code == 429:
                          print(f"Rate limit exceeded, waiting {2 ** attempt} seconds...")
                          time.sleep(2 ** attempt)
                          continue
                      else:
                          print(f"API error: {response.status_code} - {response.text}")
                          return text
                          
                  except Exception as e:
                      print(f"Azure translation error (attempt {attempt + 1}): {e}")
                      if attempt < max_retries - 1:
                          time.sleep(2 ** attempt)
                      else:
                          return text
              
              return text
          
          def create_po_file(locale, lang_code, entries):
              target_dir = f"lang/{locale}/LC_MESSAGES"
              os.makedirs(target_dir, exist_ok=True)
              
              po = polib.POFile()
              po.metadata = {
                  'Content-Type': 'text/plain; charset=UTF-8',
                  'Language': lang_code,
                  'MIME-Version': '1.0',
                  'Content-Transfer-Encoding': '8bit',
              }
              
              for msgid, msgstr in entries.items():
                  if msgid.strip():
                      entry = polib.POEntry(
                          msgid=msgid,
                          msgstr=msgstr
                      )
                      po.append(entry)
              
              target_path = os.path.join(target_dir, 'tcrp.po')
              po.save(target_path)
              print(f"Created: {target_path}")
              return target_path
          
          def main():
              source_path = 'lang/en_US/LC_MESSAGES/tcrp.po'
              
              # 원본 파일이 없으면 샘플 생성
              if not os.path.exists(source_path):
                  print(f"Source file not found: {source_path}")
                  print("Creating sample file...")
                  os.makedirs('lang/en_US/LC_MESSAGES', exist_ok=True)
                  
                  sample_po = polib.POFile()
                  sample_po.metadata = {
                      'Content-Type': 'text/plain; charset=UTF-8',
                      'Language': 'en',
                  }
                  
                  sample_entries = [
                      "Hello", "Welcome", "Settings", "Save", "Cancel", 
                      "Error", "Success", "Yes", "No", "OK"
                  ]
                  
                  for text in sample_entries:
                      entry = polib.POEntry(msgid=text, msgstr=text)
                      sample_po.append(entry)
                  
                  sample_po.save(source_path)
                  print(f"Sample file created: {source_path}")
              
              # 원본 PO 파일 로드
              try:
                  po = polib.pofile(source_path)
                  print(f"Loaded source file: {source_path}")
              except Exception as e:
                  print(f"Error loading PO file: {e}")
                  return
              
              # 각 언어별로 번역
              for locale, lang_code in LANGUAGES.items():
                  print(f"\nTranslating to {locale} ({lang_code})...")
                  
                  translated_entries = {}
                  entries_to_translate = [entry for entry in po if entry.msgid and entry.msgid.strip()]
                  
                  for entry in tqdm(entries_to_translate, desc=f"Translating {locale}"):
                      if entry.msgid and entry.msgid.strip():
                          translated_text = translate_with_azure(entry.msgid, lang_code)
                          translated_entries[entry.msgid] = translated_text
                          time.sleep(0.1)  # API 제한 방지
                  
                  create_po_file(locale, lang_code, translated_entries)
                  print(f"Completed translation for {locale}")
          
          if __name__ == "__main__":
              main()
          EOF
          
      - name: Run translation
        run: |
          python azure_translate.py
          
      - name: Convert PO to MO files
        run: |
          ROOT_PATH=${{ github.workspace }}
          DEST_PATH="${ROOT_PATH}/lang"
          
          echo "Converting PO to MO files..."
          
          # PO 파일이 있는지 확인
          if [ ! -d "${DEST_PATH}" ]; then
            echo "No lang directory found"
            exit 1
          fi
          
          # 변환 실행
          find ${DEST_PATH} -name "tcrp.po" 2>/dev/null | while read po_file; do
            mo_file="${po_file/.po/.mo}"
            echo "Converting ${po_file} to ${mo_file}"
            
            if msgfmt "${po_file}" -o "${mo_file}"; then
              echo "✓ Successfully created: ${mo_file}"
            else
              echo "✗ Failed to create: ${mo_file}"
            fi
          done
          
          # 결과 확인
          echo "Generated files:"
          find ${DEST_PATH} -name "*.po" -o -name "*.mo" | sort
          
          # 파일이 생성되었는지 확인 후 압축
          if find ${DEST_PATH} -name "*.mo" | grep -q .; then
            tar -zcvf lang.tgz -C ${DEST_PATH} .
            echo "Created lang.tgz archive"
          else
            echo "No .mo files found to archive"
          fi
          
      - name: Commit and push changes
        run: |
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-translate and generate .po/.mo files [$(date '+%Y-%m-%d %H:%M:%S')]"
            git push
          fi
