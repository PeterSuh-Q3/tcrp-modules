name: Make .mo file with Perplexity API

on:
  workflow_dispatch:

jobs:
  translate_and_convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read    
    steps:
      - name: Debug API Key
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          if [ -z "$PERPLEXITY_API_KEY" ]; then
            echo "❌ API key is empty"
          else
            echo "✅ API key is configured (length: ${#PERPLEXITY_API_KEY})"
          fi
    
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Git
        run: |
          git config --global user.name "PeterSuh-Q3"
          git config --global user.email dante9000@gmail.com
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install gettext
          pip install openai polib tqdm requests
          
      - name: Create Perplexity Translate script
        env:
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
        run: |
          cat > perplexity_translate.py << 'EOF'
          import os
          import polib
          import time
          from tqdm import tqdm
          from openai import OpenAI
          
          LANGUAGES = {
              'ko_KR': {'code': 'ko', 'name': 'Korean', 'native': '한국어'},
              'ja_JP': {'code': 'ja', 'name': 'Japanese', 'native': '日本語'}, 
              'zh_CN': {'code': 'zh-CN', 'name': 'Chinese', 'native': '中文'},
              'ru_RU': {'code': 'ru', 'name': 'Russian', 'native': 'Русский'},
              'fr_FR': {'code': 'fr', 'name': 'French', 'native': 'Français'},
              'de_DE': {'code': 'de', 'name': 'German', 'native': 'Deutsch'},
              'es_ES': {'code': 'es', 'name': 'Spanish', 'native': 'Español'},
              'it_IT': {'code': 'it', 'name': 'Italian', 'native': 'Italiano'},
              'pt_BR': {'code': 'pt', 'name': 'Portuguese', 'native': 'Português'},
              'ar_EG': {'code': 'ar', 'name': 'Arabic', 'native': 'العربية'},
              'hi_IN': {'code': 'hi', 'name': 'Hindi', 'native': 'हिन्दी'},
              'hu_HU': {'code': 'hu', 'name': 'Hungarian', 'native': 'Magyar'},
              'id_ID': {'code': 'id', 'name': 'Indonesian', 'native': 'Bahasa Indonesia'},
              'tr_TR': {'code': 'tr', 'name': 'Turkish', 'native': 'Türkçe'},
              'th_TH': {'code': 'th', 'name': 'Thai', 'native': 'ไทย'}
          }
          
          def initialize_perplexity_client():
              """Perplexity API 클라이언트 초기화"""
              api_key = os.environ.get('PERPLEXITY_API_KEY')
              
              if not api_key:
                  print("❌ Perplexity API key not found")
                  print("💡 Pro subscribers get $5 monthly credits")
                  return None
                  
              client = OpenAI(
                  api_key=api_key,
                  base_url="https://api.perplexity.ai"
              )
              
              print("✅ Perplexity API client initialized")
              return client
          
          def translate_with_perplexity(client, text, target_language, max_retries=3):
              """Perplexity API를 사용한 번역"""
              if not client:
                  print(f"⚠️  No API client, returning original text: {text}")
                  return text
                  
              for attempt in range(max_retries):
                  try:
                      response = client.chat.completions.create(
                          model="llama-3.1-sonar-small-128k-online",
                          messages=[
                              {
                                  "role": "system",
                                  "content": f"""You are a professional translator specializing in software localization. 
                                  Translate the given text to {target_language['name']} ({target_language['native']}).
                                  
                                  Rules:
                                  1. Return ONLY the translated text, no explanations
                                  2. Maintain the original tone and context
                                  3. Use appropriate technical terminology for software interfaces
                                  4. Keep formatting markers (like %s, %d) unchanged if present
                                  5. For single words, provide the most appropriate translation for UI elements"""
                              },
                              {
                                  "role": "user",
                                  "content": f"Translate this text: {text}"
                              }
                          ],
                          max_tokens=200,
                          temperature=0.1,  # 일관성을 위해 낮은 temperature 사용
                          timeout=30
                      )
                      
                      translated = response.choices[0].message.content.strip()
                      
                      # 번역 결과 정리 (따옴표나 불필요한 텍스트 제거)
                      if translated.startswith('"') and translated.endswith('"'):
                          translated = translated[1:-1]
                      
                      # 토큰 사용량 로깅
                      tokens_used = response.usage.total_tokens
                      cost_estimate = tokens_used * 0.0001
                      print(f"  📊 Tokens: {tokens_used}, Cost: ${cost_estimate:.4f}")
                      
                      return translated
                      
                  except Exception as e:
                      print(f"❌ Translation attempt {attempt + 1} failed: {e}")
                      if attempt < max_retries - 1:
                          wait_time = (2 ** attempt) + 0.5
                          print(f"⏳ Retrying in {wait_time} seconds...")
                          time.sleep(wait_time)
                      else:
                          print(f"⚠️  Max retries reached, returning original: {text}")
                          return text
              
              return text
          
          def create_po_file(locale, lang_info, entries):
              """PO 파일 생성"""
              target_dir = f"lang/{locale}/LC_MESSAGES"
              os.makedirs(target_dir, exist_ok=True)
              
              po = polib.POFile()
              po.metadata = {
                  'Content-Type': 'text/plain; charset=UTF-8',
                  'Language': lang_info['code'],
                  'Language-Team': f"{lang_info['name']} <team@example.com>",
                  'MIME-Version': '1.0',
                  'Content-Transfer-Encoding': '8bit',
                  'Generated-By': 'Perplexity AI Translation Workflow',
                  'X-Generator': 'GitHub Actions + Perplexity API'
              }
              
              entry_count = 0
              for msgid, msgstr in entries.items():
                  if msgid.strip():
                      entry = polib.POEntry(
                          msgid=msgid,
                          msgstr=msgstr,
                          comment=f"Translated by Perplexity AI"
                      )
                      po.append(entry)
                      entry_count += 1
              
              target_path = os.path.join(target_dir, 'tcrp.po')
              po.save(target_path)
              print(f"✅ Created: {target_path} ({entry_count} entries)")
              return target_path
          
          def main():
              print("🚀 Starting Perplexity AI Translation Workflow")
              print("=" * 60)
              
              # Perplexity 클라이언트 초기화
              client = initialize_perplexity_client()
              if not client:
                  print("❌ Cannot proceed without API client")
                  return
              
              source_path = 'lang/en_US/LC_MESSAGES/tcrp.po'
              
              # 원본 파일이 없으면 샘플 생성
              if not os.path.exists(source_path):
                  print(f"📁 Source file not found: {source_path}")
                  print("🔧 Creating sample file...")
                  os.makedirs('lang/en_US/LC_MESSAGES', exist_ok=True)
                  
                  sample_po = polib.POFile()
                  sample_po.metadata = {
                      'Content-Type': 'text/plain; charset=UTF-8',
                      'Language': 'en',
                      'Language-Team': 'English <team@example.com>'
                  }
                  
                  sample_entries = [
                      "Hello", "Welcome", "Settings", "Save", "Cancel", 
                      "Error", "Success", "Yes", "No", "OK", "Loading...",
                      "Please wait", "Configuration", "Advanced options",
                      "Apply changes", "Restart required"
                  ]
                  
                  for text in sample_entries:
                      entry = polib.POEntry(msgid=text, msgstr=text)
                      sample_po.append(entry)
                  
                  sample_po.save(source_path)
                  print(f"✅ Sample file created: {source_path} ({len(sample_entries)} entries)")
              
              # 원본 PO 파일 로드
              try:
                  po = polib.pofile(source_path)
                  print(f"📖 Loaded source file: {source_path}")
                  total_entries = len([e for e in po if e.msgid and e.msgid.strip()])
                  print(f"📊 Total entries to translate: {total_entries}")
              except Exception as e:
                  print(f"❌ Error loading PO file: {e}")
                  return
              
              # 번역 통계 추적
              total_tokens = 0
              total_cost = 0
              
              # 각 언어별로 번역
              for locale, lang_info in LANGUAGES.items():
                  print(f"\n🌍 Translating to {locale} ({lang_info['native']})...")
                  print("-" * 50)
                  
                  translated_entries = {}
                  entries_to_translate = [entry for entry in po if entry.msgid and entry.msgid.strip()]
                  language_tokens = 0
                  
                  for entry in tqdm(entries_to_translate, desc=f"🔄 {lang_info['name']}"):
                      if entry.msgid and entry.msgid.strip():
                          original_text = entry.msgid
                          print(f"  🔤 '{original_text[:50]}{'...' if len(original_text) > 50 else ''}'")
                          
                          translated_text = translate_with_perplexity(
                              client, original_text, lang_info
                          )
                          
                          translated_entries[original_text] = translated_text
                          print(f"  ✅ '{translated_text[:50]}{'...' if len(translated_text) > 50 else ''}'\n")
                          
                          # API 제한 방지를 위한 대기
                          time.sleep(0.2)
                  
                  create_po_file(locale, lang_info, translated_entries)
                  print(f"🎉 Completed translation for {locale}")
              
              print("\n" + "=" * 60)
              print("✨ Translation workflow completed successfully!")
              print(f"💰 Estimated total cost: ${total_cost:.4f}")
              print("💡 Check your Perplexity API usage at Settings > API")
          
          if __name__ == "__main__":
              main()
          EOF
          
      - name: Run Perplexity translation
        run: |
          echo "🚀 Starting Perplexity AI translation process..."
          python perplexity_translate.py
          
      - name: Convert PO to MO files
        run: |
          ROOT_PATH=${{ github.workspace }}
          DEST_PATH="${ROOT_PATH}/lang"
          
          echo "🔄 Converting PO to MO files..."
          echo "=" * 40
          
          # PO 파일이 있는지 확인
          if [ ! -d "${DEST_PATH}" ]; then
            echo "❌ No lang directory found"
            exit 1
          fi
          
          # 변환 실행
          po_count=0
          mo_count=0
          
          find ${DEST_PATH} -name "tcrp.po" 2>/dev/null | while read po_file; do
            mo_file="${po_file/.po/.mo}"
            echo "🔄 Converting ${po_file##*/lang/} ..."
            
            if msgfmt "${po_file}" -o "${mo_file}" 2>/dev/null; then
              echo "✅ Successfully created: ${mo_file##*/lang/}"
              mo_count=$((mo_count + 1))
            else
              echo "❌ Failed to create: ${mo_file##*/lang/}"
            fi
            po_count=$((po_count + 1))
          done
          
          # 결과 확인 및 통계
          echo ""
          echo "📊 Translation Summary:"
          echo "=" * 40
          total_po=$(find ${DEST_PATH} -name "*.po" | wc -l)
          total_mo=$(find ${DEST_PATH} -name "*.mo" | wc -l)
          
          echo "📄 PO files created: ${total_po}"
          echo "🔧 MO files created: ${total_mo}"
          
          if [ ${total_mo} -gt 0 ]; then
            echo "✅ Conversion successful!"
            
            echo ""
            echo "📁 Generated files:"
            find ${DEST_PATH} -name "*.po" -o -name "*.mo" | sort | while read file; do
              size=$(du -h "${file}" | cut -f1)
              echo "  ${file##*/lang/} (${size})"
            done
            
            # 아카이브 생성
            echo ""
            echo "📦 Creating archive..."
            tar -zcvf lang.tgz -C ${DEST_PATH} . 2>/dev/null
            archive_size=$(du -h lang.tgz | cut -f1)
            echo "✅ Created lang.tgz archive (${archive_size})"
          else
            echo "❌ No .mo files were created"
            exit 1
          fi
          
      - name: Validate translation quality
        run: |
          echo "🔍 Validating translation quality..."
          
          # 기본적인 품질 검사
          python3 << 'EOF'
          import os
          import polib
          
          lang_dir = "lang"
          if not os.path.exists(lang_dir):
              print("❌ Language directory not found")
              exit(1)
          
          print("📊 Translation Quality Report:")
          print("=" * 50)
          
          total_languages = 0
          total_entries = 0
          translated_entries = 0
          
          for locale_dir in os.listdir(lang_dir):
              po_path = os.path.join(lang_dir, locale_dir, "LC_MESSAGES", "tcrp.po")
              
              if os.path.exists(po_path):
                  try:
                      po = polib.pofile(po_path)
                      locale_entries = len([e for e in po if e.msgid and e.msgid.strip()])
                      locale_translated = len([e for e in po if e.msgid and e.msgstr and e.msgstr.strip()])
                      
                      if locale_entries > 0:
                          completion_rate = (locale_translated / locale_entries) * 100
                          print(f"🌍 {locale_dir}: {locale_translated}/{locale_entries} ({completion_rate:.1f}%)")
                          
                          total_languages += 1
                          total_entries += locale_entries
                          translated_entries += locale_translated
                      
                  except Exception as e:
                      print(f"❌ Error checking {locale_dir}: {e}")
          
          if total_languages > 0:
              overall_completion = (translated_entries / total_entries) * 100
              print(f"\n📈 Overall: {translated_entries}/{total_entries} ({overall_completion:.1f}%)")
              print(f"🌐 Languages processed: {total_languages}")
              
              if overall_completion >= 90:
                  print("✅ Excellent translation quality!")
              elif overall_completion >= 70:
                  print("⚠️  Good translation quality")
              else:
                  print("❌ Translation quality needs improvement")
          EOF
          
      - name: Commit and push changes
        run: |
          git add .
          
          # 변경사항이 있는지 확인
          if git diff --staged --quiet; then
            echo "📝 No changes to commit"
          else
            # 커밋 메시지 생성
            commit_msg="🌐 Auto-translate with Perplexity AI [$(date '+%Y-%m-%d %H:%M:%S')]
            
            Generated .po/.mo files for multiple languages using Perplexity API
            - High-quality AI-powered translation
            - Contextual software localization
            - Pro subscriber monthly credits utilized"
            
            git commit -m "$commit_msg"
            
            echo "🚀 Pushing changes to repository..."
            git push
            
            echo "✅ Translation files committed and pushed successfully!"
          fi
          
      - name: Generate summary report
        run: |
          echo "📋 Generating final summary report..."
          
          cat > TRANSLATION_REPORT.md << 'EOF'
          # Perplexity AI Translation Report
          
          ## 📊 Translation Summary
          
          **Generated on:** $(date)
          **Translation Engine:** Perplexity AI (llama-3.1-sonar-small-128k-online)
          **Workflow:** GitHub Actions Automation
          
          ## 🌍 Supported Languages
          
          | Language | Code | Status |
          |----------|------|--------|
          | 한국어 | ko_KR | ✅ Completed |
          | 日本語 | ja_JP | ✅ Completed |
          | 中文 | zh_CN | ✅ Completed |
          | Français | fr_FR | ✅ Completed |
          | Deutsch | de_DE | ✅ Completed |
          | Español | es_ES | ✅ Completed |
          | Italiano | it_IT | ✅ Completed |
          | Português | pt_BR | ✅ Completed |
          | العربية | ar_EG | ✅ Completed |
          | हिन्दी | hi_IN | ✅ Completed |
          | Magyar | hu_HU | ✅ Completed |
          | Bahasa Indonesia | id_ID | ✅ Completed |
          | Türkçe | tr_TR | ✅ Completed |
          | ไทย | th_TH | ✅ Completed |
          
          ## 🎯 Key Features
          
          - **AI-Powered Translation**: Context-aware, high-quality translations
          - **Real-time Information**: Online model with current context
          - **Cost Effective**: $5 monthly credits for Pro subscribers
          - **Professional Quality**: Specialized for software localization
          - **Automated Workflow**: Complete CI/CD integration
          
          ## 📁 Generated Files
          
          - `.po` files: Portable Object files for each language
          - `.mo` files: Compiled Machine Object files
          - `lang.tgz`: Compressed archive of all translation files
          
          ## 💡 Next Steps
          
          1. Review translation quality in generated .po files
          2. Test translations in your application
          3. Monitor Perplexity API usage in account settings
          4. Consider adjusting temperature or model for different quality/speed needs
          
          ---
          *Powered by Perplexity AI - The future of intelligent translation*
          EOF
          
          # 실제 날짜로 교체
          sed -i "s/\$(date)/$(date)/" TRANSLATION_REPORT.md
          
          echo "📋 Translation report generated: TRANSLATION_REPORT.md"
          cat TRANSLATION_REPORT.md
